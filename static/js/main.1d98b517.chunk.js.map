{"version":3,"sources":["components/Speech.js","components/VoiceSelect.js","App.js","serviceWorker.js","index.js"],"names":["Speech","state","timeoutHandler","synthesis","window","speechSynthesis","utterance","SpeechSynthesisUtterance","props","text","handleSpeak","isSpeaking","rate","voiceName","volume","voices","getVoices","voice","find","name","lang","cancel","speak","handleSpeakEnd","event","interval","shouldRepeat","onSpeakEnd","setTimeout","isFunction","this","onSpeakPause","onSpeakResume","onSpeakBoundary","onSpeakStart","onend","onpause","noop","onresume","onboundary","onstart","pitch","prevProps","React","PureComponent","defaultProps","VoiceSelect","onChange","useState","voiceList","setVoiceList","voiceTotal","setVoiceTotal","useEffect","length","groupBy","onChangeHandler","useCallback","target","value","Form","Group","controlId","Label","Control","as","map","key","label","App","setText","setIsSpeaking","setShouldRepeat","setVoiceName","setVolume","setRate","handleClick","prevState","Container","className","Row","Col","size","type","placeholder","sm","Check","checked","min","max","step","Button","variant","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAMMA,E,4MAuBJC,MAAQ,CACNC,gBAAiB,G,EAGnBC,UAAYC,OAAOC,gB,EAEnBC,UAAY,IAAIC,yBAAyB,EAAKC,MAAMC,M,EAsBpDC,YAAc,WAAO,IAAD,EACoC,EAAKF,MAAnDG,EADU,EACVA,WAAYC,EADF,EACEA,KAAMH,EADR,EACQA,KAAMI,EADd,EACcA,UAAWC,EADzB,EACyBA,OACrCC,EAAS,EAAKZ,UAAUa,YAE1BL,IACF,EAAKL,UAAUW,MAAQJ,EAAYK,IAAKH,EAAQ,CAAEI,KAAMN,IAAeK,IAAKH,EAAQ,CAAEK,KAAM,OAC5F,EAAKd,UAAUG,KAAOA,EACtB,EAAKH,UAAUQ,OAASA,EACxB,EAAKR,UAAUM,KAAOA,EAEtB,EAAKT,UAAUkB,SACf,EAAKlB,UAAUmB,MAAM,EAAKhB,a,EAI9BiB,eAAiB,SAACC,GAAW,IAAD,EACiC,EAAKhB,MAAxDiB,EADkB,EAClBA,SAAUd,EADQ,EACRA,WAAYe,EADJ,EACIA,aAAcC,EADlB,EACkBA,WACxChB,GAAce,GAAcE,WAAW,EAAKlB,YAAae,GACzDI,IAAWF,IAAaA,EAAWH,I,kEAtCpB,IAAD,EACqDM,KAAKtB,MAApEuB,EADU,EACVA,aAAcC,EADJ,EACIA,cAAeC,EADnB,EACmBA,gBAAiBC,EADpC,EACoCA,aACtDJ,KAAKxB,UAAU6B,MAAQL,KAAKP,eAC5BO,KAAKxB,UAAU8B,QAAUL,GAAgBM,IACzCP,KAAKxB,UAAUgC,SAAWN,GAAiBK,IAC3CP,KAAKxB,UAAUiC,WAAaN,GAAmBI,IAC/CP,KAAKxB,UAAUkC,QAAUN,GAAgBG,IACzCP,KAAKxB,UAAUW,MAAQC,IAAKY,KAAK3B,UAAUa,YAAa,CAAEI,KAAM,OAChEU,KAAKxB,UAAUc,KAAO,KACtBU,KAAKxB,UAAUmC,MAAQ,IACvBX,KAAKxB,UAAUM,KAAO,EACtBkB,KAAKxB,UAAUQ,OAASgB,KAAKtB,MAAMM,S,yCAGlB4B,GACbA,EAAU/B,aAAemB,KAAKtB,MAAMG,YACtCmB,KAAKpB,gB,+BA0BP,OAAKoB,KAAK3B,UAIH,KAHE,uD,GA1EQwC,IAAMC,eAArB5C,EAgBG6C,aAAe,CACpBlC,YAAY,EACZe,cAAc,EACdD,SAAU,IACVX,OAAQ,IA6DGd,Q,kCClFTG,EAAYC,OAAOC,gBA8BVyC,EA5BK,SAAC,GAA6B,IAA3BjC,EAA0B,EAA1BA,UAAWkC,EAAe,EAAfA,SAAe,EACbJ,IAAMK,SAAS,IADF,mBACxCC,EADwC,KAC7BC,EAD6B,OAEXP,IAAMK,SAAS,GAFJ,mBAExCG,EAFwC,KAE5BC,EAF4B,KAI/CT,IAAMU,WAAU,WACd,GAAIlD,EAAUa,YAAYsC,SAAWH,EAAY,CAC/C,IAAMpC,EAASwC,IAAQpD,EAAUa,YAAa,QAC9CkC,EAAanC,GACbqC,EAAcjD,EAAUa,YAAYsC,WAErC,CAACnD,EAAUa,cAEd,IAAMwC,EAAkBb,IAAMc,aAAY,SAACjC,GAAD,OAAWuB,EAASvB,EAAMkC,OAAOC,SAAQ,CAACZ,IAEpF,OACE,kBAACa,EAAA,EAAKC,MAAN,CAAYC,UAAU,8BACpB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,SAASN,MAAO9C,EAAWkC,SAAUS,GACnDU,IAAIjB,GAAW,SAAClC,EAAQK,GAAT,OACd,8BAAU+C,IAAK/C,EAAMgD,MAAOhD,GACzB8C,IAAInD,GAAQ,SAACE,GAAD,OAAY,4BAAQkD,IAAKlD,EAAME,KAAMwC,MAAO1C,EAAME,MAAOF,EAAME,gBCiFzEkD,G,cAjGH,WAAO,IAAD,EACQ1B,IAAMK,SAAS,IADvB,mBACTvC,EADS,KACH6D,EADG,OAEoB3B,IAAMK,UAAS,GAFnC,mBAETrC,EAFS,KAEG4D,EAFH,OAGwB5B,IAAMK,UAAS,GAHvC,mBAGTtB,EAHS,KAGK8C,EAHL,OAIkB7B,IAAMK,SAAS,SAJjC,mBAITnC,EAJS,KAIE4D,EAJF,OAKY9B,IAAMK,SAAS,IAL3B,mBAKTlC,EALS,KAKD4D,EALC,OAMQ/B,IAAMK,SAAS,GANvB,mBAMTpC,EANS,KAMH+D,EANG,KAQVC,EAAcjC,IAAMc,aAAY,kBAAMc,GAAc,SAACM,GAAD,OAAgBA,OAAY,IAMtF,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,yBACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKF,UAAU,sBAAf,mBAEF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACrB,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKI,QAAN,CACEkB,KAAK,KACLC,KAAK,OACLC,YAAY,aACZzB,MAAOlD,EACPsC,SAAU,SAACvB,GAAD,OAAW8C,EAAQ9C,EAAMkC,OAAOC,aAKlD,kBAACqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKI,GAAI,GACP,kBAACzB,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKG,MAAN,eACA,kBAACH,EAAA,EAAK0B,MAAN,CACEH,KAAK,WACLI,QAAS7D,EACTqB,SAAU,SAACvB,GAAD,OAAWgD,EAAgBhD,EAAMkC,OAAO6B,cAKxD,kBAACN,EAAA,EAAD,CAAKI,GAAI,GACP,kBAAC,EAAD,CAAaxE,UAAWA,EAAWkC,SAAU,SAACY,GAAD,OAAWc,EAAad,OAGvE,kBAACsB,EAAA,EAAD,CAAKI,GAAI,GACP,kBAACzB,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKG,MAAN,eACA,kBAACH,EAAA,EAAKI,QAAN,CACEmB,KAAK,QACLxB,MAAO7C,EACPiC,SAAU,SAACvB,GAAD,OAAWkD,GAAWlD,EAAMkC,OAAOC,QAC7C6B,IAAK,EACLC,IAAK,EACLC,KAAM,QAKZ,kBAACT,EAAA,EAAD,CAAKI,GAAI,GACP,kBAACzB,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKG,MAAN,uBACA,kBAACH,EAAA,EAAKI,QAAN,CACEmB,KAAK,QACLxB,MAAO/C,EACPmC,SAAU,SAACvB,GAAD,OAAWmD,GAASnD,EAAMkC,OAAOC,QAC3C6B,IAAK,EACLC,IAAK,EACLC,KAAM,SAKd,kBAACV,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACU,EAAA,EAAD,CAAQC,QAASjF,EAAa,UAAY,UAAWkF,QAASjB,GAC3DjE,EAAa,YAAc,aAKlC,kBAAC,EAAD,CACEF,KAAMA,EACNE,WAAYA,EACZe,aAAcA,EACdb,UAAWA,EACXC,OAAQA,EACRF,KAAMA,EACNe,WAjFiB,WACrB,IAAKD,EAAc,OAAO6C,GAAc,SCVxBuB,QACW,cAA7B1F,OAAO2F,SAASC,UAEe,UAA7B5F,OAAO2F,SAASC,UAEhB5F,OAAO2F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1d98b517.chunk.js","sourcesContent":["import find from 'lodash/find';\nimport isFunction from 'lodash/isFunction';\nimport noop from 'lodash/noop';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Speech extends React.PureComponent {\n  static propTypes = {\n    text: PropTypes.string,\n    voiceName: PropTypes.string,\n    volume: PropTypes.number,\n    rate: PropTypes.number,\n    isSpeaking: PropTypes.bool,\n    shouldRepeat: PropTypes.bool,\n    interval: PropTypes.number,\n    onSpeakEnd: PropTypes.func,\n    onSpeakPause: PropTypes.func,\n    onSpeakResume: PropTypes.func,\n    onSpeakBoundary: PropTypes.func,\n    onSpeakStart: PropTypes.func,\n  };\n\n  static defaultProps = {\n    isSpeaking: false,\n    shouldRepeat: false,\n    interval: 500,\n    volume: 0.8,\n  };\n\n  state = {\n    timeoutHandler: -1,\n  };\n\n  synthesis = window.speechSynthesis;\n\n  utterance = new SpeechSynthesisUtterance(this.props.text);\n\n  componentDidMount() {\n    const { onSpeakPause, onSpeakResume, onSpeakBoundary, onSpeakStart } = this.props;\n    this.utterance.onend = this.handleSpeakEnd;\n    this.utterance.onpause = onSpeakPause || noop;\n    this.utterance.onresume = onSpeakResume || noop;\n    this.utterance.onboundary = onSpeakBoundary || noop;\n    this.utterance.onstart = onSpeakStart || noop;\n    this.utterance.voice = find(this.synthesis.getVoices(), { lang: 'en' });\n    this.utterance.lang = 'en';\n    this.utterance.pitch = 1.5;\n    this.utterance.rate = 1;\n    this.utterance.volume = this.props.volume;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isSpeaking !== this.props.isSpeaking) {\n      this.handleSpeak();\n    }\n  }\n\n  handleSpeak = () => {\n    const { isSpeaking, rate, text, voiceName, volume } = this.props;\n    const voices = this.synthesis.getVoices();\n\n    if (isSpeaking) {\n      this.utterance.voice = voiceName ? find(voices, { name: voiceName }) : find(voices, { lang: 'en' });\n      this.utterance.text = text;\n      this.utterance.volume = volume;\n      this.utterance.rate = rate;\n\n      this.synthesis.cancel();\n      this.synthesis.speak(this.utterance);\n    }\n  };\n\n  handleSpeakEnd = (event) => {\n    const { interval, isSpeaking, shouldRepeat, onSpeakEnd } = this.props;\n    if (isSpeaking && shouldRepeat) setTimeout(this.handleSpeak, interval);\n    if (isFunction(onSpeakEnd)) onSpeakEnd(event);\n  };\n\n  render() {\n    if (!this.synthesis) {\n      return 'Text to Speech is not available in your browser.';\n    }\n\n    return null;\n  }\n}\n\nexport default Speech;\n","import groupBy from 'lodash/groupBy';\nimport map from 'lodash/map';\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\n\nconst synthesis = window.speechSynthesis;\n\nconst VoiceSelect = ({ voiceName, onChange }) => {\n  const [voiceList, setVoiceList] = React.useState([]);\n  const [voiceTotal, setVoiceTotal] = React.useState(0);\n\n  React.useEffect(() => {\n    if (synthesis.getVoices().length !== voiceTotal) {\n      const voices = groupBy(synthesis.getVoices(), 'lang');\n      setVoiceList(voices);\n      setVoiceTotal(synthesis.getVoices().length);\n    }\n  }, [synthesis.getVoices()]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const onChangeHandler = React.useCallback((event) => onChange(event.target.value), [onChange]);\n\n  return (\n    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n      <Form.Label>Select Voice</Form.Label>\n      <Form.Control as=\"select\" value={voiceName} onChange={onChangeHandler}>\n        {map(voiceList, (voices, lang) => (\n          <optgroup key={lang} label={lang}>\n            {map(voices, (voice) => (<option key={voice.name} value={voice.name}>{voice.name}</option>))}\n          </optgroup>\n        ))}\n      </Form.Control>\n    </Form.Group>\n  );\n};\n\nexport default VoiceSelect;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Speech from './components/Speech';\nimport VoiceSelect from './components/VoiceSelect';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = () => {\n  const [text, setText] = React.useState('');\n  const [isSpeaking, setIsSpeaking] = React.useState(false);\n  const [shouldRepeat, setShouldRepeat] = React.useState(true);\n  const [voiceName, setVoiceName] = React.useState('Karen');\n  const [volume, setVolume] = React.useState(0.5);\n  const [rate, setRate] = React.useState(1);\n\n  const handleClick = React.useCallback(() => setIsSpeaking((prevState) => !prevState), []);\n\n  const handleSpeakEnd = () => {\n    if (!shouldRepeat) return setIsSpeaking(false);\n  };\n\n  return (\n    <Container className=\"inspire-me__container\">\n      <Row>\n        <Col className=\"inspire-me__header\">Text to Speech</Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form.Group>\n            <Form.Control\n              size=\"lg\"\n              type=\"text\"\n              placeholder=\"Enter text\"\n              value={text}\n              onChange={(event) => setText(event.target.value)}\n            />\n          </Form.Group>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={3}>\n          <Form.Group>\n            <Form.Label>Repeat</Form.Label>\n            <Form.Check\n              type=\"checkbox\"\n              checked={shouldRepeat}\n              onChange={(event) => setShouldRepeat(event.target.checked)}\n            />\n          </Form.Group>\n        </Col>\n\n        <Col sm={3}>\n          <VoiceSelect voiceName={voiceName} onChange={(value) => setVoiceName(value)} />\n        </Col>\n\n        <Col sm={3}>\n          <Form.Group>\n            <Form.Label>Volume</Form.Label>\n            <Form.Control\n              type=\"range\"\n              value={volume}\n              onChange={(event) => setVolume(+event.target.value)}\n              min={0}\n              max={1}\n              step={0.01}\n            />\n          </Form.Group>\n        </Col>\n\n        <Col sm={3}>\n          <Form.Group>\n            <Form.Label>Playback Speed</Form.Label>\n            <Form.Control\n              type=\"range\"\n              value={rate}\n              onChange={(event) => setRate(+event.target.value)}\n              min={0}\n              max={2}\n              step={0.01}\n            />\n          </Form.Group>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Button variant={isSpeaking ? 'warning' : 'primary'} onClick={handleClick}>\n            {isSpeaking ? 'Silence!!' : 'Speak!!'}\n          </Button>\n        </Col>\n      </Row>\n\n      <Speech\n        text={text}\n        isSpeaking={isSpeaking}\n        shouldRepeat={shouldRepeat}\n        voiceName={voiceName}\n        volume={volume}\n        rate={rate}\n        onSpeakEnd={handleSpeakEnd}\n      />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}